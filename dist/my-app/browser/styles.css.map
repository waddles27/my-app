{
  "version": 3,
  "sources": ["src/styles.scss", "src/scss/layout/_issues.scss", "node_modules/@angular/material/core/tokens/_m3-system.scss", "node_modules/@angular/material/core/tokens/_token-utils.scss", "src/scss/components/_issue.scss", "src/scss/_typography.scss", "src/scss/components/_issue-list.scss", "src/scss/components/_navigation.scss", "src/scss/components/_dialogs.scss"],
  "sourcesContent": ["@use '@angular/material' as mat;\n@use 'scss/theme-colors' as test-theme;\n@use 'scss/typography' as typography;\n@use 'scss/components' as components;\n@use 'scss/layout' as layout;\n\nhtml {\n  @include mat.theme((\n    color: (\n      theme-type: color-scheme,\n      primary: test-theme.$primary-palette,\n      tertiary: test-theme.$tertiary-palette,\n    ),\n    typography: Roboto,\n    density: 0,\n  ));\n\n  @include mat.theme-overrides((\n  ));\n  @include mat.icon-overrides((\n    color: var(--mat-sys-secondary)\n  ));\n\n  @include components.all('app');\n  @include layout.all();\n}\n\n:root {\n  color-scheme: light dark;\n}\n\nhtml, body {\n  margin: 0;\n  height: 100%;\n}\n\nbody {\n  display: grid;\n  font-family: \"Roboto\", sans-serif;\n}\n\n\n.app-layout {\n  display: grid;\n  height: 100%;\n  grid-template-rows: min-content 1fr;\n  grid-row-gap: 16px;\n  overflow: hidden;\n\n  @include mat.list-overrides((list-item-leading-avatar-shape: var(--mat-sys-corner-small),\n  ));\n\n}\n\n\nmat-dialog-content {\n  form {\n    display: grid;\n    gap: 16px;\n  }\n}\n\n\n.filler {\n  flex-grow: 1;\n}\n\n.layout-head {\n  @include mat.form-field-overrides((outlined-container-shape: var(--mat-sys-corner-extra-large),\n        outlined-outline-width: 0,\n        outlined-focus-outline-width: 0,\n        container-vertical-padding: 8px,\n        container-height: 40px));\n\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: max-content;\n    grid-column-gap: 16px;\n    align-items: center;\n}\n\n.search {\n  position: relative;\n  isolation: isolate;\n  overflow: hidden;\n\n  border-radius: var(--mat-sys-corner-extra-large);\n  background-color: var(--mat-sys-surface-container-high);\n\n  &:hover {\n      --_state-layer-opacity: var(--mat-sys-hover-state-layer-opacity);\n  }\n\n  &::after {\n      content: '';\n      position: absolute;\n      inset: 0;\n      z-index: -1;\n      background-color: currentColor;\n      border-radius: inherit;\n      transition: opacity 150ms linear;\n\n      opacity: var(--_state-layer-opacity, 0);\n  }\n\n  &__prefix {\n      margin-left: 4px;\n  }\n\n  &__suffix {\n      margin-right: 8px;\n  }\n}\n\n.container {\n  display: grid;\n  height: 100%;\n  grid-auto-rows: min-content;\n  overflow: hidden;\n  gap: 8px;\n  border-radius: var(--mat-sys-corner-large);\n  background-color: var(--mat-sys-surface-container);\n}\n\n\n.element-container {\n\n  &_issue {\n    grid-template-columns: min-content 1fr min-content;\n  }\n\n  display: grid;\n  gap: 8px;\n  padding: 4px 16px;\n  grid-template-columns: min-content 1fr;\n  align-items: center;\n}\n\n.mat-flat-button {\n  @include mat.icon-overrides((\n    color: var(--mat-sys-surface-container)\n  ));\n}\n\nhtml, body { height: 100%; }\nbody { margin: 0; font-family: Roboto, \"Helvetica Neue\", sans-serif; }\n", "@use '@angular/material' as mat;\n@mixin component() {\n\n    .heading {\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-auto-flow: column;\n        grid-column-gap: 4px;\n\n        padding: 8px 16px;\n\n        background-color: var(--mat-sys-surface-container-high);\n    }\n\n    .content {\n        position: relative;\n        padding-block: 8px;\n    }\n\n    .progress {\n        position: absolute;\n        inset-inline: 0;\n        top: 0;\n    }\n    /* Стили для контейнера задач */\n    .issues-container {\n        display: flex;\n        gap: 20px; /* Расстояние между секциями */\n        padding: 16px; /* Отступы внутри контейнера */\n    }\n\n    /* Стили для секции с открытыми задачами */\n    .open-issues {\n        flex: 1; /* Равномерное распределение пространства */\n        background-color: var(--mat-sys-surface-container-low);\n        border-radius: 8px;\n        padding: 16px;\n        box-shadow: 10px 5px 5px red; /* Тень для визуального разделения */\n    }\n\n    /* Стили для секции с закрытыми задачами */\n    .closed-issues {\n        flex: 1; /* Равномерное распределение пространства */\n        background-color: var(--mat-sys-surface-container-low);\n        border-radius: 8px;\n        padding: 16px;\n        box-shadow: 10px 5px 5px red; /* Тень для визуального разделения */\n    }\n\n    /* Заголовки секций */\n    h2 {\n        margin-bottom: 16px;\n        font-size: 18px;\n        font-weight: 500;\n        color: var(--mat-sys-on-surface);\n    }\n\n    /* Стили для элементов задач */\n    .element-container_issue {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        padding: 8px;\n        border-radius: 4px;\n        background-color: var(--mat-sys-surface-container-high);\n        margin-bottom: 8px;\n\n        &:hover {\n            background-color: var(--mat-sys-surface-container-hover);\n        }\n    }\n\n    /* Кнопки внутри элементов задач */\n    .element-container_issue button {\n        color: var(--mat-sys-on-surface);\n    }\n}\n", "@use '../style/elevation';\n@use '../style/sass-utils';\n@use '../theming/config-validation';\n@use '../theming/definition';\n@use './m3/definitions';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:list';\n@use './m3-tokens';\n\n/// Emits necessary CSS variables for Material's system level values for the values defined in the\n/// config map. The config map can have values color, typography, and/or density.\n///\n/// If the config map's color value is an Angular Material color palette, it will be used as the\n/// primary and tertiary colors with a `color-scheme` theme type. Otherwise if the color value is a\n/// map, it must have a `primary` value containing an Angular Material color palette, and\n/// optionally a different `tertiary` palette (defaults to primary palette) and `theme-type` that\n/// is either `light`, `dark`, or 'color-scheme` (defaults to `color-scheme`). Color variable\n/// definitions will not be emitted if there are no color values in the config.\n///\n/// If the config map's typography value is a font family string, it will be used as the\n/// plain and brand font family with default bold, medium, and regular weights of 700, 500, and 400,\n/// respectfully. Otherwise if the typography value is a map, it must have a `plain-family` font\n/// family value, and optionally a different `brand-family` font family (defaults to the plain\n/// value) and weights for `bold-weight` (default: 700), `bold-weight` (default: 500), and\n/// `bold-weight` (default: 400). Typography variable definitions will not be emitted if there are\n/// no typography values in the config.\n///\n/// If the config map's density value is a number, it will be used as the density scale. Otherwise\n/// if the density value is a map, it must have a `scale` value. Density variable definitions will\n/// not be emitted if there are no density values in the config.\n///\n/// The application variables emitted use the namespace prefix \"--mat-sys\".\n/// e.g. --mat-sys-surface: #E5E5E5\n///\n/// @param {Map} $config The color configuration with optional keys color, typography, or density.\n@mixin theme($config, $overrides: ()) {\n  $color: map.get($config, color);\n  $color-config: null;\n  @if ($color) {\n    // validate-palette returns null if it is a valid M3 palette\n    $is-palette: config-validation.validate-palette($color) == null;\n\n    // Default to \"color-scheme\" theme type if the config's color does not provide one.\n    @if (not $is-palette and not map.has-key($color, theme-type)) {\n      $color: map.set($color, theme-type, color-scheme);\n    }\n\n    $color-config: if($is-palette,\n            definition.define-colors((primary: $color, theme-type: color-scheme)),\n            definition.define-colors($color));\n    @include system-level-colors($color-config, $overrides, definition.$system-fallback-prefix);\n    @include system-level-elevation($color-config, $overrides, definition.$system-fallback-prefix);\n  }\n\n  $typography: map.get($config, typography);\n  $typography-config: null;\n  @if ($typography) {\n    $typography-config: if(meta.type-of($typography) == 'map',\n      definition.define-typography($typography),\n      definition.define-typography((plain-family: $typography)));\n    @include system-level-typography(\n        $typography-config, $overrides, definition.$system-fallback-prefix);\n  }\n\n  $density: map.get($config, density);\n  $density-config: null;\n  @if ($density) {\n    $density-config: if(meta.type-of($density) == 'map',\n      definition.define-density($density),\n      definition.define-density((scale: $density)));\n    $scale: map.get($density-config, _mat-theming-internals-do-not-access, density-scale);\n    @if ($scale != 0) {\n      $all-tokens: m3-tokens.generate-density-tokens($scale);\n      @each $component-tokens in $all-tokens {\n        $namespace: list.nth($component-tokens, 1);\n        @each $tokens in list.nth($component-tokens, 2) {\n          --#{list.nth($namespace, 1)}-#{list.nth($namespace, 2)}-#{\n              list.nth($tokens, 1)}: #{list.nth($tokens, 2)};\n        }\n      }\n    }\n  }\n\n  @include system-level-shape($overrides: $overrides, $prefix: definition.$system-fallback-prefix);\n  @include system-level-state($overrides: $overrides, $prefix: definition.$system-fallback-prefix);\n}\n\n/// Emits the system-level CSS variables for each of the provided override values. E.g. to\n/// change the primary color to red, use `mat.theme-overrides((primary: red));`\n@mixin theme-overrides($overrides, $prefix: definition.$system-fallback-prefix) {\n  $sys-names: map-merge-all(\n      definitions.md-sys-color-values-light(),\n      definitions.md-sys-typescale-values(),\n      definitions.md-sys-elevation-values(),\n      definitions.md-sys-shape-values(),\n      definitions.md-sys-state-values());\n\n  & {\n    @each $name, $value in $overrides {\n      @if (map.has-key($sys-names, $name)) {\n        --#{$prefix}-#{$name}: #{map.get($overrides, $name)};\n      }\n    }\n  }\n}\n\n@mixin system-level-colors($theme, $overrides: (), $prefix: null) {\n  $palettes: map.get($theme, _mat-theming-internals-do-not-access, palettes);\n  $base-palettes: (\n    neutral: map.get($palettes, neutral),\n    neutral-variant: map.get($palettes, neutral-variant),\n    secondary: map.get($palettes, secondary),\n    error: map.get($palettes, error),\n  );\n\n  $type: map.get($theme, _mat-theming-internals-do-not-access, theme-type);\n  $primary: map.merge(map.get($palettes, primary), $base-palettes);\n  $tertiary: map.merge(map.get($palettes, tertiary), $base-palettes);\n  $error: map.get($palettes, error);\n\n  @if (not $prefix) {\n    $prefix: map.get($theme, _mat-theming-internals-do-not-access,\n        color-system-variables-prefix) or definition.$system-level-prefix;\n  }\n\n  $ref: (\n    md-ref-palette: m3-tokens.generate-ref-palette-tokens($primary, $tertiary, $error)\n  );\n\n  $sys-colors: _generate-sys-colors($ref, $type);\n\n  // Manually insert a subset of palette values that are used directly by components\n  // instead of system variables.\n  $sys-colors: map.set($sys-colors,\n    'neutral-variant20', map.get($ref, md-ref-palette, neutral-variant20));\n  $sys-colors: map.set($sys-colors,\n    'neutral10', map.get($ref, md-ref-palette, neutral10));\n\n  & {\n    @each $name, $value in $sys-colors {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@function _generate-sys-colors($ref, $type) {\n  $light-sys-colors: definitions.md-sys-color-values-light($ref);\n  @if ($type == light) {\n    @return $light-sys-colors;\n  }\n\n  $dark-sys-colors: definitions.md-sys-color-values-dark($ref);\n  @if ($type == dark) {\n    @return $dark-sys-colors;\n  }\n\n  @if ($type == color-scheme) {\n    $light-dark-sys-colors: ();\n    @each $name, $light-value in $light-sys-colors {\n      $dark-value: map.get($dark-sys-colors, $name);\n      $light-dark-sys-colors:\n          map.set($light-dark-sys-colors, $name, light-dark($light-value, $dark-value));\n    }\n    @return $light-dark-sys-colors;\n  }\n\n  @error 'Unknown theme-type provided: #{$type}';\n}\n\n@mixin system-level-typography($theme, $overrides: (), $prefix: null) {\n  $font-definition: map.get($theme, _mat-theming-internals-do-not-access, font-definition);\n  $brand: map.get($font-definition, brand);\n  $plain: map.get($font-definition, plain);\n  $bold: map.get($font-definition, bold);\n  $medium: map.get($font-definition, medium);\n  $regular: map.get($font-definition, regular);\n  $ref: (md-ref-typeface:\n      m3-tokens.generate-ref-typeface-tokens($brand, $plain, $bold, $medium, $regular)\n  );\n\n  @if (not $prefix) {\n    $prefix: map.get($theme, _mat-theming-internals-do-not-access,\n        typography-system-variables-prefix) or definition.$system-level-prefix;\n  }\n\n  & {\n    @each $name, $value in definitions.md-sys-typescale-values($ref) {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@mixin system-level-elevation($theme, $overrides: (), $prefix: definition.$system-level-prefix) {\n  $shadow-color: map.get(\n      $theme, _mat-theming-internals-do-not-access, color-tokens, (mdc, theme), shadow);\n\n  @each $name, $value in definitions.md-sys-elevation-values() {\n    $level: map.get($overrides, $name) or $value;\n    $value: elevation.get-box-shadow($level, $shadow-color);\n    & {\n      --#{$prefix}-#{$name}: #{$value};\n    }\n  }\n}\n\n@mixin system-level-shape($theme: (), $overrides: (), $prefix: definition.$system-level-prefix) {\n  & {\n    @each $name, $value in definitions.md-sys-shape-values() {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@mixin system-level-state($theme: (), $overrides: (), $prefix: definition.$system-level-prefix) {\n  & {\n    @each $name, $value in definitions.md-sys-state-values() {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n// Return a new map where the values are the same as the provided map's\n// keys, prefixed with \"--mat-sys-\". For example:\n// (key1: '', key2: '') --> (key1: --mat-sys-key1, key2: --mat-sys-key2)\n@function _create-system-app-vars-map($map) {\n  $new-map: ();\n  @each $key, $value in $map {\n    $new-map: map.set($new-map, $key, --#{definition.$system-fallback-prefix}-#{$key});\n  }\n  @return $new-map;\n}\n\n// Create a components tokens map where values are based on\n// system fallback variables referencing Material's system keys.\n// Includes density token fallbacks where density is 0.\n@function create-system-fallbacks() {\n  $app-vars: (\n    'md-sys-color':\n        _create-system-app-vars-map(definitions.md-sys-color-values-light()),\n    'md-sys-typescale':\n        _create-system-app-vars-map(definitions.md-sys-typescale-values()),\n    'md-sys-elevation':\n        _create-system-app-vars-map(definitions.md-sys-elevation-values()),\n    'md-sys-state':\n        _create-system-app-vars-map(definitions.md-sys-state-values()),\n    'md-sys-shape':\n        _create-system-app-vars-map(definitions.md-sys-shape-values()),\n    // Add a subset of palette-specific colors used by components instead of system values\n    'md-ref-palette':\n        _create-system-app-vars-map(\n          (\n            neutral10: '', // Form field native select option text color\n            neutral-variant20: '', // Sidenav scrim (container background shadow when opened),\n          )\n        ),\n  );\n\n  @return sass-utils.deep-merge-all(\n      m3-tokens.generate-tokens($app-vars, true, true),\n      m3-tokens.generate-density-tokens(0)\n  );\n}\n\n/// Creates a single merged map from the provided variable-length map arguments\n@function map-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n", "@use '../style/elevation';\n@use '../style/sass-utils';\n@use './m3-system';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n\n$_tokens: null;\n$_component-prefix: null;\n$_system-fallbacks: m3-system.create-system-fallbacks();\n\n// Sets the token prefix and map to use when creating token slots.\n@mixin use-tokens($prefix, $tokens) {\n  $_component-prefix: $prefix !global;\n  $_tokens: $tokens !global;\n\n  @content;\n\n  $_component-prefix: null !global;\n  $_tokens: null !global;\n}\n\n// Combines a prefix and a string to generate a CSS variable name for a token.\n@function _create-var-name($prefix, $token) {\n  @if $prefix == null or $token == null {\n    @error 'Must specify both prefix and name when generating token';\n  }\n\n  $string-prefix: '';\n\n  // Prefixes are lists so we need to combine them.\n  @each $part in $prefix {\n    $string-prefix: if($string-prefix == '', $part, '#{$string-prefix}-#{$part}');\n  }\n\n  @return string.unquote('--#{$string-prefix}-#{$token}');\n}\n\n// Creates a CSS variable, including the fallback if provided.\n@function _create-var($name, $fallback: null) {\n  @if ($fallback) {\n    @return var($name, $fallback);\n  } @else {\n    @return var($name);\n  }\n}\n\n// Gets the value of the token given the current global context state.\n@function _get-token-value($token, $fallback) {\n  $var-name: _create-var-name($_component-prefix, $token);\n  $fallback: _get-token-fallback($token, $fallback);\n  @return _create-var($var-name, $fallback);\n}\n\n// Assertion mixin that throws an error if the global state has not been set up by wrapping\n// calls with `use-tokens`.\n@function _assert-use-tokens($token) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error 'Function was not called within a wrapping call of `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  @return true;\n}\n\n// Emits a slot for the given token, provided that it has a non-null value in the token map passed\n// to `use-tokens`.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@mixin create-token-slot($property, $token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @if map.get($_tokens, $token) != null {\n    #{$property}: #{_get-token-value($token, $fallback)};\n  }\n}\n\n// Returns the name of a token including the current prefix. Intended to be used in calculations\n// involving tokens. `create-token-slot` should be used when outputting tokens.\n@function get-token-variable-name($token) {\n  $_assert: _assert-use-tokens($token);\n  @return _create-var-name($_component-prefix, $token);\n}\n\n// Returns a `var()` reference to a specific token. Intended for declarations\n// where the token has to be referenced as a part of a larger expression.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@function get-token-variable($token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @return _get-token-value($token, $fallback);\n}\n\n// Gets the token's fallback value. Prefers adding a system-level fallback if one exists, otherwise\n// use the provided fallback.\n@function _get-token-fallback($token, $fallback: null) {\n  // If the $fallback is `true`, this is the component's signal to use the current token map value\n  @if ($fallback == true) {\n    $fallback: map.get($_tokens, $token);\n  }\n\n  // Check whether there's a system-level fallback. If not, return the optional\n  // provided fallback (otherwise null).\n  $sys-fallback: map.get($_system-fallbacks, $_component-prefix, $token);\n  @if (not $sys-fallback) {\n    @return $fallback;\n  }\n\n  @if (sass-utils.is-css-var-name($sys-fallback)) {\n    @return _create-var($sys-fallback, $fallback);\n  }\n\n  @return $sys-fallback;\n}\n\n// Outputs a map of tokens under a specific prefix.\n@mixin create-token-values($prefix, $tokens) {\n  @if $tokens != null {\n    // TODO: The `&` adds to the file size of theme, but it's necessary for compatibility\n    // with https://sass-lang.com/documentation/breaking-changes/mixed-decls/. We should\n    // figure out a better way to do this or move all the concrete styles out of the theme.\n    & {\n      @each $key, $value in $tokens {\n        @if $value != null {\n          #{_create-var-name($prefix, $key)}: #{$value};\n        }\n      }\n    }\n  }\n}\n\n// MDC doesn't currently handle elevation tokens properly. As a temporary workaround we can combine\n// the elevation and shadow-color tokens into a full box-shadow and use it as the value for the\n// elevation token.\n@function resolve-elevation($tokens, $elevation-token, $shadow-color-token) {\n  $elevation: map.get($tokens, $elevation-token);\n  $shadow-color: map.get($tokens, $shadow-color-token);\n  @return map.merge(\n    $tokens,\n    (\n      $elevation-token: elevation.get-box-shadow($elevation, $shadow-color),\n      $shadow-color-token: null,\n    )\n  );\n}\n\n/// Checks whether a list starts wih a given prefix\n/// @param {List} $list The list value to check the prefix of.\n/// @param {List} $prefix The prefix to check.\n/// @return {Boolean} Whether the list starts with the prefix.\n@function _is-prefix($list, $prefix) {\n  @for $i from 1 through list.length($prefix) {\n    @if list.nth($list, $i) != list.nth($prefix, $i) {\n      @return false;\n    }\n  }\n  @return true;\n}\n\n/// Gets the supported color variants in the given token set for the given prefix.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get color variants for.\n/// @return {List} The supported color variants.\n@function _supported-color-variants($tokens, $prefix) {\n  $result: ();\n  @each $namespace in map.keys($tokens) {\n    @if list.length($prefix) == list.length($namespace) - 1 and _is-prefix($namespace, $prefix) {\n      $result: list.append($result, list.nth($namespace, list.length($namespace)), comma);\n    }\n  }\n  @return $result;\n}\n\n/// Gets the token values for the given components prefix with the given options.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get the token values for.\n/// @param {ArgList} Any additional options\n///   Currently the additional supported options are:\n//     - $color-variant - The color variant to use for the component\n//     - $emit-overrides-only - Whether to emit *only* the overrides for the\n//                              specific color variant, or all color styles. Defaults to false.\n/// @throws If given options are invalid\n/// @return {Map} The token values for the requested component.\n@function get-tokens-for($tokens, $prefix, $options...) {\n  $options: sass-utils.validate-keyword-args($options, (color-variant, emit-overrides-only));\n  @if $tokens == () {\n    @return ();\n  }\n  $values: map.get($tokens, $prefix);\n  $color-variant: map.get($options, color-variant);\n  $emit-overrides-only: map.get($options, emit-overrides-only);\n  @if $color-variant == null {\n    @return $values;\n  }\n  $overrides: map.get($tokens, list.append($prefix, $color-variant));\n  @if $overrides == null {\n    $variants: _supported-color-variants($tokens, $prefix);\n    $secondary-message: if(\n      $variants == (),\n      'Mixin does not support color variants',\n      'Supported color variants are: #{$variants}'\n    );\n\n    @error 'Invalid color variant: #{$color-variant}. #{$secondary-message}.';\n  }\n  @return if($emit-overrides-only, $overrides, map.merge($values, $overrides));\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $namespace-configs...) {\n  @include sass-utils.current-selector-or-root() {\n    $prefixed-name-data: ();\n    $unprefixed-name-data: ();\n    $all-names: ();\n\n    @each $config in $namespace-configs {\n      $namespace: map.get($config, namespace);\n      $prefix: if(map.has-key($config, prefix), map.get($config, prefix), '');\n      $tokens: _filter-nulls(map.get($config, tokens));\n      @each $name, $value in $tokens {\n        $prefixed-name: $prefix + $name;\n        $all-names: list.append($all-names, $prefixed-name, $separator: comma);\n        @if map.has-key($prefixed-name-data, $prefixed-name) {\n          @error #{\n          'Error overriding token: Ambiguous token name `'\n        }#{\n          $prefixed-name\n        }#{\n          '` exists in multiple namespaces: `('\n        }#{\n          list.nth(map.get($prefixed-name-data, $prefixed-name), 1)\n        }#{\n          ')` and `('\n        }#{\n          $namespace\n        }#{\n          ')`'\n        };\n        }\n        $prefixed-name-data: map.set($prefixed-name-data, $prefixed-name, ($namespace, $name));\n        $unprefixed-data: map.has-key($unprefixed-name-data, $name) and\n          map.get($unprefixed-name-data, $name) or\n          ();\n        $unprefixed-data: list.append($unprefixed-data, ($namespace, $prefixed-name));\n        $unprefixed-name-data: map.set($unprefixed-name-data, $name, $unprefixed-data);\n      }\n    }\n\n    @each $name, $value in $overrides {\n      @if map.has-key($prefixed-name-data, $name) {\n        $data: map.get($prefixed-name-data, $name);\n        $namespace: list.nth($data, 1);\n        $name: list.nth($data, 2);\n        @include create-token-values(\n          $namespace,\n          (\n            $name: $value,\n          )\n        );\n      } @else if (map.has-key($unprefixed-name-data, $name)) {\n        $datalist: map.get($unprefixed-name-data, $name);\n        $prefixed-names: ();\n        @each $data in $datalist {\n          $namespace: list.nth($data, 1);\n          $prefixed-names: list.append($prefixed-names, list.nth($data, 2), $separator: comma);\n          @include create-token-values(\n            $namespace,\n            (\n              $name: $value,\n            )\n          );\n        }\n        @warn #{\n        'Token `'\n      }#{\n        $name\n      }#{\n        '` is deprecated. Please use one of the following alternatives: '\n      }#{\n        $prefixed-names\n      };\n      } @else {\n        @error #{'Invalid token name `'}#{$name}#{'`. '}#{'Valid tokens are: '}#{$all-names};\n      }\n    }\n  }\n}\n\n/// Filters keys with a null value out of the map.\n/// @param {Map} $map The map to filter.\n/// @return {Map} The given map with all of the null keys filtered out.\n@function _filter-nulls($map) {\n  $result: ();\n  @each $key, $val in $map {\n    @if $val != null {\n      $result: map.set($result, $key, $val);\n    }\n  }\n  @return $result;\n}\n", "﻿@use '../typography';\n\n@mixin _set-token($prefix, $component, $token, $value) {\n  & {\n      --#{$prefix}-#{$component}-#{$token}: #{$value};\n  }\n}\n\n@mixin component($component-prefix) {\n  $component-name: 'issue';\n  $component-name-project: 'project';\n  $marker-variants: (\n      \"minor\": (\n\n          \"background-color\": rgb(142, 205, 142),\n          \"color\": var(--mat-sys-on-surface-variant),\n      ),\n      \"normal\": (\n\n          \"background-color\": rgb(41, 137, 227),\n          \"color\": var(--mat-sys-on-secondary-container),\n      ),\n      \"major\": (\n\n          \"background-color\": rgb(214, 179, 114),\n          \"color\": var(--mat-sys-on-tertiary-container),\n      ),\n      \"critical\": (\n\n          \"background-color\": rgb(234, 78, 78),\n          \"color\": var(--mat-sys-on-error-container),\n      )\n  );\n\n  .#{$component-prefix}-#{$component-name} {\n      @each $variant, $color-map in $marker-variants {\n          &--#{$variant} {\n              @each $property, $color in $color-map {\n                  @include _set-token($component-prefix, $component-name, 'marker-#{$property}', $color);\n              }\n          }\n      }\n  }\n\n  .#{$component-prefix}-#{$component-name},\n  .#{$component-prefix}-#{$component-name-project} {\n    &__project-code {\n      @include typography.typography-title-medium();;\n    }\n\n    &__name {\n      @include typography.typography-title-medium();\n    }\n\n    &__created-on {\n      @include typography.typography-body-medium();\n    }\n  }\n}\n", "@mixin _private-apply-font($type-scale) {\n  font-size: var(--mat-sys-#{$type-scale}-size);\n  font-weight: var(--mat-sys-#{$type-scale}-weight);\n  letter-spacing: var(--mat-sys-#{$type-scale}-tracking);\n  line-height: var(--mat-sys-#{$type-scale}-line-height);\n}\n\n@mixin typography-body-large() {\n  @include _private-apply-font(body-large);\n}\n\n@mixin typography-body-medium() {\n  @include _private-apply-font(body-medium);\n}\n\n@mixin typography-title-medium() {\n  @include _private-apply-font(title-medium);\n}\n\n@mixin typography-headline-large() {\n  @include _private-apply-font(headline-large);\n}\n\n@mixin typography-headline-small() {\n  @include _private-apply-font(headline-small);\n}\n\n@mixin typography-display-small() {\n  @include _private-apply-font(display-small);\n}\n\n", "﻿@mixin component() {\n  .issue-list {\n    display: grid;\n\n    grid: {\n      row-gap: 8px;\n    }\n\n    padding: 24px;\n\n    border-radius: var(--mat-sys-corner-large);\n    background-color: var(--mat-sys-surface-container);\n  }\n}\n", "@mixin component() {\n    .sidenav-container {\n        height: 100%;\n        padding-top: 64px;\n    }\n\n    .sidenav {\n        box-shadow: 2px 2px 8px 0px var(--mat-sys-background);\n        width: 200px;\n        padding: 64px 16px;\n        background-color: var(--mat-sys-surface-container);\n    }\n\n    .sidenav-rail {\n        width: 90px;\n\n        .nav-item, .mat-toolbar {\n            justify-content: center;\n        }\n    }\n\n    .sidenav .mat-toolbar {\n        background: inherit;\n    }\n\n    .mat-toolbar.mat-primary {\n        position: sticky;\n        top: 0;\n        z-index: 1;\n    }\n\n    .mat-divider {\n        margin: 0 16px;\n    }\n\n    .mat-nav-list {\n        gap: 8px;\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n    }\n\n    .mat-nav-list a:last-child {\n        margin-top: auto;\n    }\n\n    .nav-item {\n        display: flex;\n        align-items: center;\n        gap: 16px;\n        height: 48px;\n    }\n\n\n\n    .toolbar {\n        background-color: var(--mat-sys-surface-container);\n        position: fixed;\n        z-index: 2;\n        padding: 0 24px;\n        gap: 8px;\n        box-shadow: 2px 2px 8px 0px var(--mat-sys-background);\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .title{\n\n    }\n\n    main {\n        padding-inline: 16px;\n        padding-bottom: 16px;\n        padding-top: 16px;\n    }\n\n    .bottom-nav {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        background: var(--mat-sys-surface-container);\n        box-shadow: 0px -2px 8px rgba(0, 0, 0, 0.2);\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n        padding: 8px 0;\n        z-index: 1000; // Поверх контента\n\n        a {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            text-decoration: none;\n            color: inherit;\n            gap: 4px;\n        }\n\n        mat-icon {\n            font-size: 24px;\n        }\n    }\n\n}\n", "@mixin component() {\n    .content {\n        padding-top: 16px;\n    }\n\n    .issue-create-form {\n        $fields: (\n            \"project\",\n            \"priority\",\n            \"name\",\n            \"description\"\n        );\n    \n        display: grid;\n        grid-gap: 16px;\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: repeat(2, 1fr);\n        grid-template-areas: \"project priority\" \"name name\" \"description description\";\n    \n        @each $field in $fields {\n            &__#{$field} {\n                grid-area: #{$field};\n            }\n        }\n    }\n    \n}\n"],
  "mappings": "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",
  "names": []
}
